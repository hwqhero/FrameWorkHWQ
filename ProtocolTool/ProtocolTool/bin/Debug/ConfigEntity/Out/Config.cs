//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5485
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConfigData
{
    using System;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using System.Collections;


    public class SkipAttr : System.Attribute
    {
    }

    /// <summary>
    /// 地图关卡
    /// </summary>
    public class Level : ConfigMetaData
    {

        internal int id;

        internal int chapterId;

        internal string name;

        [SkipAttr()]
        internal Chapter chapter;

        /// <summary>
        /// 关卡id
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
        }

        /// <summary>
        /// 章节id
        /// </summary>
        public int ChapterId
        {
            get
            {
                return this.chapterId;
            }
        }

        /// <summary>
        /// 地图名称
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
        }

        /// <summary>
        /// 章节表
        /// </summary>
        public Chapter Chapter
        {
            get
            {
                return this.chapter;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new Level();
        }

        internal override int CustomCode()
        {
            return 2637164;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(id);
            bw.Write(chapterId);
            bw.Write(name);
            if (chapter != null)
            {
                bw.Write(true);
                chapter.Serialize(bw);
            }
            else
            {
                bw.Write(false);
            }

        }

        internal override void Deserialize(BinaryReader br)
        {

            id = br.ReadInt32();
            chapterId = br.ReadInt32();
            name = br.ReadString();
            if (br.ReadBoolean())
            {
                chapter = new Chapter();
                chapter.Deserialize(br);
            }

        }
    }

    /// <summary>
    /// 章节表
    /// </summary>
    public class Chapter : ConfigMetaData
    {

        internal int id;

        internal string name;

        [SkipAttr()]
        internal List<Level> levelList;

        /// <summary>
        /// 章节id
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
        }

        /// <summary>
        /// 章节名称
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
        }

        /// <summary>
        /// 地图关卡
        /// </summary>
        public List<Level> LevelList
        {
            get
            {
                return this.levelList;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new Chapter();
        }

        internal override int CustomCode()
        {
            return 41014879;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(id);
            bw.Write(name);
            if (levelList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)levelList.Count);
                foreach (Level temp in levelList)
                {
                    temp.Serialize(bw);
                }
            }

        }

        internal override void Deserialize(BinaryReader br)
        {

            id = br.ReadInt32();
            name = br.ReadString();
            int levelListCount = br.ReadInt16();
            levelList = new List<Level>();
            for (int i = 0; i < levelListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    Level obj = new Level();
                    obj.Deserialize(br);
                    levelList.Add(obj);
                }
            }

        }
    }

    /// <summary>
    /// 关卡条件
    /// </summary>
    public class LevelCondition : ConfigMetaData
    {

        internal int id;

        internal int levelId;

        internal int conditionType;

        internal string conditionValue;

        /// <summary>
        /// 条件id
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
        }

        /// <summary>
        /// 关卡
        /// </summary>
        public int LevelId
        {
            get
            {
                return this.levelId;
            }
        }

        /// <summary>
        /// 条件类型
        /// </summary>
        public int ConditionType
        {
            get
            {
                return this.conditionType;
            }
        }

        /// <summary>
        /// 条件值
        /// </summary>
        public string ConditionValue
        {
            get
            {
                return this.conditionValue;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new LevelCondition();
        }

        internal override int CustomCode()
        {
            return 3888474;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(id);
            bw.Write(levelId);
            bw.Write(conditionType);
            bw.Write(conditionValue);

        }

        internal override void Deserialize(BinaryReader br)
        {

            id = br.ReadInt32();
            levelId = br.ReadInt32();
            conditionType = br.ReadInt32();
            conditionValue = br.ReadString();

        }
    }

    /// <summary>
    /// 角色技能
    /// </summary>
    public class RoleSkill : ConfigMetaData
    {

        internal int roleId;

        internal int skillId;

        internal int openLV;

        internal int openMax;

        [SkipAttr()]
        internal SkillData skillData;

        /// <summary>
        /// 人物id
        /// </summary>
        public int RoleId
        {
            get
            {
                return this.roleId;
            }
        }

        /// <summary>
        /// 技能id
        /// </summary>
        public int SkillId
        {
            get
            {
                return this.skillId;
            }
        }

        /// <summary>
        /// 技能解锁等级
        /// </summary>
        public int OpenLV
        {
            get
            {
                return this.openLV;
            }
        }

        /// <summary>
        /// 技能高级等级
        /// </summary>
        public int OpenMax
        {
            get
            {
                return this.openMax;
            }
        }

        /// <summary>
        /// 技能数据
        /// </summary>
        public SkillData SkillData
        {
            get
            {
                return this.skillData;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new RoleSkill();
        }

        internal override int CustomCode()
        {
            return 25209742;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(roleId);
            bw.Write(skillId);
            bw.Write(openLV);
            bw.Write(openMax);
            if (skillData != null)
            {
                bw.Write(true);
                skillData.Serialize(bw);
            }
            else
            {
                bw.Write(false);
            }

        }

        internal override void Deserialize(BinaryReader br)
        {

            roleId = br.ReadInt32();
            skillId = br.ReadInt32();
            openLV = br.ReadInt32();
            openMax = br.ReadInt32();
            if (br.ReadBoolean())
            {
                skillData = new SkillData();
                skillData.Deserialize(br);
            }

        }
    }

    /// <summary>
    /// 特效数据
    /// </summary>
    public class EffectData : ConfigMetaData
    {

        internal int effectId;

        internal string effectName;

        internal bool isDestory;

        internal float duration;

        internal int direction;

        internal float speed;

        internal bool isCalculation;

        internal float maxDis;

        /// <summary>
        /// 特效ID
        /// </summary>
        public int EffectId
        {
            get
            {
                return this.effectId;
            }
        }

        /// <summary>
        /// 特效资源名称
        /// </summary>
        public string EffectName
        {
            get
            {
                return this.effectName;
            }
        }

        /// <summary>
        /// 自动销毁
        /// </summary>
        public bool IsDestory
        {
            get
            {
                return this.isDestory;
            }
        }

        /// <summary>
        /// 持续时间
        /// </summary>
        public float Duration
        {
            get
            {
                return this.duration;
            }
        }

        /// <summary>
        /// 方向
        /// </summary>
        public int Direction
        {
            get
            {
                return this.direction;
            }
        }

        /// <summary>
        /// 移动速度
        /// </summary>
        public float Speed
        {
            get
            {
                return this.speed;
            }
        }

        /// <summary>
        /// 计算伤害
        /// </summary>
        public bool IsCalculation
        {
            get
            {
                return this.isCalculation;
            }
        }

        /// <summary>
        /// 最大移动距离
        /// </summary>
        public float MaxDis
        {
            get
            {
                return this.maxDis;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new EffectData();
        }

        internal override int CustomCode()
        {
            return 26966483;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(effectId);
            bw.Write(effectName);
            bw.Write(isDestory);
            bw.Write(duration);
            bw.Write(direction);
            bw.Write(speed);
            bw.Write(isCalculation);
            bw.Write(maxDis);

        }

        internal override void Deserialize(BinaryReader br)
        {

            effectId = br.ReadInt32();
            effectName = br.ReadString();
            isDestory = br.ReadBoolean();
            duration = br.ReadSingle();
            direction = br.ReadInt32();
            speed = br.ReadSingle();
            isCalculation = br.ReadBoolean();
            maxDis = br.ReadSingle();

        }
    }

    /// <summary>
    /// 技能释放条件
    /// </summary>
    public class SkillCondition : ConfigMetaData
    {

        internal int skillId;

        internal int type;

        internal float value;

        internal float percent;

        internal int logicSymbol;

        /// <summary>
        /// 技能ID
        /// </summary>
        public int SkillId
        {
            get
            {
                return this.skillId;
            }
        }

        /// <summary>
        /// 类型
        /// </summary>
        public int Type
        {
            get
            {
                return this.type;
            }
        }

        /// <summary>
        /// 固定值
        /// </summary>
        public float Value
        {
            get
            {
                return this.value;
            }
        }

        /// <summary>
        /// 百分比
        /// </summary>
        public float Percent
        {
            get
            {
                return this.percent;
            }
        }

        /// <summary>
        /// 关系
        /// </summary>
        public int LogicSymbol
        {
            get
            {
                return this.logicSymbol;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new SkillCondition();
        }

        internal override int CustomCode()
        {
            return 31884011;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(skillId);
            bw.Write(type);
            bw.Write(value);
            bw.Write(percent);
            bw.Write(logicSymbol);

        }

        internal override void Deserialize(BinaryReader br)
        {

            skillId = br.ReadInt32();
            type = br.ReadInt32();
            value = br.ReadSingle();
            percent = br.ReadSingle();
            logicSymbol = br.ReadInt32();

        }
    }

    /// <summary>
    /// 技能时间
    /// </summary>
    public class SkillTime : ConfigMetaData
    {

        internal int skillId;

        internal int timeid;

        internal int type;

        internal float time;

        /// <summary>
        /// 技能ID
        /// </summary>
        public int SkillId
        {
            get
            {
                return this.skillId;
            }
        }

        /// <summary>
        /// 时间ID
        /// </summary>
        public int Timeid
        {
            get
            {
                return this.timeid;
            }
        }

        /// <summary>
        /// 类型
        /// </summary>
        public int Type
        {
            get
            {
                return this.type;
            }
        }

        /// <summary>
        /// 值
        /// </summary>
        public float Time
        {
            get
            {
                return this.time;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new SkillTime();
        }

        internal override int CustomCode()
        {
            return 32176063;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(skillId);
            bw.Write(timeid);
            bw.Write(type);
            bw.Write(time);

        }

        internal override void Deserialize(BinaryReader br)
        {

            skillId = br.ReadInt32();
            timeid = br.ReadInt32();
            type = br.ReadInt32();
            time = br.ReadSingle();

        }
    }

    /// <summary>
    /// 技能资源特效
    /// </summary>
    public class SkillSpecialEffect : ConfigMetaData
    {

        internal int skillId;

        internal int type;

        internal int effectID;

        [SkipAttr()]
        internal EffectData effectIdData;

        /// <summary>
        /// 技能id
        /// </summary>
        public int SkillId
        {
            get
            {
                return this.skillId;
            }
        }

        /// <summary>
        /// 类型
        /// </summary>
        public int Type
        {
            get
            {
                return this.type;
            }
        }

        /// <summary>
        /// 特效名称
        /// </summary>
        public int EffectID
        {
            get
            {
                return this.effectID;
            }
        }

        /// <summary>
        /// 特效数据
        /// </summary>
        public EffectData EffectIdData
        {
            get
            {
                return this.effectIdData;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new SkillSpecialEffect();
        }

        internal override int CustomCode()
        {
            return 44150175;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(skillId);
            bw.Write(type);
            bw.Write(effectID);
            if (effectIdData != null)
            {
                bw.Write(true);
                effectIdData.Serialize(bw);
            }
            else
            {
                bw.Write(false);
            }

        }

        internal override void Deserialize(BinaryReader br)
        {

            skillId = br.ReadInt32();
            type = br.ReadInt32();
            effectID = br.ReadInt32();
            if (br.ReadBoolean())
            {
                effectIdData = new EffectData();
                effectIdData.Deserialize(br);
            }

        }
    }

    /// <summary>
    /// 技能特效
    /// </summary>
    public class SkillEffect : ConfigMetaData
    {

        internal int skillId;

        internal int affectId;

        internal int type;

        internal float value;

        internal float percent;

        internal string timeId;

        [SkipAttr()]
        internal List<SkillTime> timeList;

        /// <summary>
        /// 技能id
        /// </summary>
        public int SkillId
        {
            get
            {
                return this.skillId;
            }
        }

        /// <summary>
        /// 作用ID
        /// </summary>
        public int AffectId
        {
            get
            {
                return this.affectId;
            }
        }

        /// <summary>
        /// 类型
        /// </summary>
        public int Type
        {
            get
            {
                return this.type;
            }
        }

        /// <summary>
        /// 值
        /// </summary>
        public float Value
        {
            get
            {
                return this.value;
            }
        }

        /// <summary>
        /// 百分比
        /// </summary>
        public float Percent
        {
            get
            {
                return this.percent;
            }
        }

        /// <summary>
        /// 所对应时间ID
        /// </summary>
        public string TimeId
        {
            get
            {
                return this.timeId;
            }
        }

        /// <summary>
        /// 技能时间
        /// </summary>
        public List<SkillTime> TimeList
        {
            get
            {
                return this.timeList;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new SkillEffect();
        }

        internal override int CustomCode()
        {
            return 65326725;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(skillId);
            bw.Write(affectId);
            bw.Write(type);
            bw.Write(value);
            bw.Write(percent);
            bw.Write(timeId);
            if (timeList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)timeList.Count);
                foreach (SkillTime temp in timeList)
                {
                    temp.Serialize(bw);
                }
            }

        }

        internal override void Deserialize(BinaryReader br)
        {

            skillId = br.ReadInt32();
            affectId = br.ReadInt32();
            type = br.ReadInt32();
            value = br.ReadSingle();
            percent = br.ReadSingle();
            timeId = br.ReadString();
            int timeListCount = br.ReadInt16();
            timeList = new List<SkillTime>();
            for (int i = 0; i < timeListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    SkillTime obj = new SkillTime();
                    obj.Deserialize(br);
                    timeList.Add(obj);
                }
            }

        }
    }

    /// <summary>
    /// 技能状态
    /// </summary>
    public class SkillBuff : ConfigMetaData
    {

        internal int skillId;

        internal int affectId;

        internal int type;

        internal string timeId;

        [SkipAttr()]
        internal List<SkillTime> timeList;

        /// <summary>
        /// 技能ID
        /// </summary>
        public int SkillId
        {
            get
            {
                return this.skillId;
            }
        }

        /// <summary>
        /// 作用ID
        /// </summary>
        public int AffectId
        {
            get
            {
                return this.affectId;
            }
        }

        /// <summary>
        /// 类型
        /// </summary>
        public int Type
        {
            get
            {
                return this.type;
            }
        }

        /// <summary>
        /// 所对应时间ID
        /// </summary>
        public string TimeId
        {
            get
            {
                return this.timeId;
            }
        }

        /// <summary>
        /// 技能时间
        /// </summary>
        public List<SkillTime> TimeList
        {
            get
            {
                return this.timeList;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new SkillBuff();
        }

        internal override int CustomCode()
        {
            return 61150033;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(skillId);
            bw.Write(affectId);
            bw.Write(type);
            bw.Write(timeId);
            if (timeList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)timeList.Count);
                foreach (SkillTime temp in timeList)
                {
                    temp.Serialize(bw);
                }
            }

        }

        internal override void Deserialize(BinaryReader br)
        {

            skillId = br.ReadInt32();
            affectId = br.ReadInt32();
            type = br.ReadInt32();
            timeId = br.ReadString();
            int timeListCount = br.ReadInt16();
            timeList = new List<SkillTime>();
            for (int i = 0; i < timeListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    SkillTime obj = new SkillTime();
                    obj.Deserialize(br);
                    timeList.Add(obj);
                }
            }

        }
    }

    /// <summary>
    /// 英雄配置数据
    /// </summary>
    public class HeroConfigData : ConfigMetaData
    {

        internal int roleId;

        internal string name;

        internal string titleName;

        internal int physicsAttack;

        internal int magicAttack;

        internal int defense;

        internal int magicResistance;

        internal int pCritical;

        internal int mCritical;

        internal float attackSpeed;

        internal int releaseSpeed;

        internal int maxHP;

        internal int maxMP;

        internal int rating;

        internal int dodge;

        internal int hardValue;

        internal int deftValue;

        internal int repHP;

        internal int repMP;

        internal float moveSpeed;

        internal int attackType;

        internal float warnRange;

        internal float attackRange;

        internal int turnSpeed;

        internal float attackAngle;

        internal float warnAngel;

        [SkipAttr()]
        internal List<RoleSkill> skillList;

        [SkipAttr()]
        internal List<NormalAttackData> normalAttackList;

        /// <summary>
        /// 角色id
        /// </summary>
        public int RoleId
        {
            get
            {
                return this.roleId;
            }
        }

        /// <summary>
        /// 角色名称
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
        }

        /// <summary>
        /// 称号
        /// </summary>
        public string TitleName
        {
            get
            {
                return this.titleName;
            }
        }

        /// <summary>
        /// 物理攻击力 
        /// </summary>
        public int PhysicsAttack
        {
            get
            {
                return this.physicsAttack;
            }
        }

        /// <summary>
        /// 魔法攻击力
        /// </summary>
        public int MagicAttack
        {
            get
            {
                return this.magicAttack;
            }
        }

        /// <summary>
        /// 护甲
        /// </summary>
        public int Defense
        {
            get
            {
                return this.defense;
            }
        }

        /// <summary>
        /// 魔抗
        /// </summary>
        public int MagicResistance
        {
            get
            {
                return this.magicResistance;
            }
        }

        /// <summary>
        /// 物理暴击率
        /// </summary>
        public int PCritical
        {
            get
            {
                return this.pCritical;
            }
        }

        /// <summary>
        /// 魔法暴击率
        /// </summary>
        public int MCritical
        {
            get
            {
                return this.mCritical;
            }
        }

        /// <summary>
        /// 普通攻击速度
        /// </summary>
        public float AttackSpeed
        {
            get
            {
                return this.attackSpeed;
            }
        }

        /// <summary>
        /// 技能释放速度
        /// </summary>
        public int ReleaseSpeed
        {
            get
            {
                return this.releaseSpeed;
            }
        }

        /// <summary>
        /// 生命值
        /// </summary>
        public int MaxHP
        {
            get
            {
                return this.maxHP;
            }
        }

        /// <summary>
        /// 魔法值
        /// </summary>
        public int MaxMP
        {
            get
            {
                return this.maxMP;
            }
        }

        /// <summary>
        /// 命中率
        /// </summary>
        public int Rating
        {
            get
            {
                return this.rating;
            }
        }

        /// <summary>
        /// 回避率
        /// </summary>
        public int Dodge
        {
            get
            {
                return this.dodge;
            }
        }

        /// <summary>
        /// 硬直
        /// </summary>
        public int HardValue
        {
            get
            {
                return this.hardValue;
            }
        }

        /// <summary>
        /// 灵巧
        /// </summary>
        public int DeftValue
        {
            get
            {
                return this.deftValue;
            }
        }

        /// <summary>
        /// 生命回复
        /// </summary>
        public int RepHP
        {
            get
            {
                return this.repHP;
            }
        }

        /// <summary>
        /// 魔法回复
        /// </summary>
        public int RepMP
        {
            get
            {
                return this.repMP;
            }
        }

        /// <summary>
        /// 移动速度
        /// </summary>
        public float MoveSpeed
        {
            get
            {
                return this.moveSpeed;
            }
        }

        /// <summary>
        /// 近远战
        /// </summary>
        public int AttackType
        {
            get
            {
                return this.attackType;
            }
        }

        /// <summary>
        /// 警戒半径
        /// </summary>
        public float WarnRange
        {
            get
            {
                return this.warnRange;
            }
        }

        /// <summary>
        /// 有效攻击范围（射程）
        /// </summary>
        public float AttackRange
        {
            get
            {
                return this.attackRange;
            }
        }

        /// <summary>
        /// 转身速度
        /// </summary>
        public int TurnSpeed
        {
            get
            {
                return this.turnSpeed;
            }
        }

        /// <summary>
        /// 角度
        /// </summary>
        public float AttackAngle
        {
            get
            {
                return this.attackAngle;
            }
        }

        /// <summary>
        /// 警戒角度
        /// </summary>
        public float WarnAngel
        {
            get
            {
                return this.warnAngel;
            }
        }

        /// <summary>
        /// 角色技能
        /// </summary>
        public List<RoleSkill> SkillList
        {
            get
            {
                return this.skillList;
            }
        }

        /// <summary>
        /// 普通攻击数据
        /// </summary>
        public List<NormalAttackData> NormalAttackList
        {
            get
            {
                return this.normalAttackList;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new HeroConfigData();
        }

        internal override int CustomCode()
        {
            return 24123405;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(roleId);
            bw.Write(name);
            bw.Write(titleName);
            bw.Write(physicsAttack);
            bw.Write(magicAttack);
            bw.Write(defense);
            bw.Write(magicResistance);
            bw.Write(pCritical);
            bw.Write(mCritical);
            bw.Write(attackSpeed);
            bw.Write(releaseSpeed);
            bw.Write(maxHP);
            bw.Write(maxMP);
            bw.Write(rating);
            bw.Write(dodge);
            bw.Write(hardValue);
            bw.Write(deftValue);
            bw.Write(repHP);
            bw.Write(repMP);
            bw.Write(moveSpeed);
            bw.Write(attackType);
            bw.Write(warnRange);
            bw.Write(attackRange);
            bw.Write(turnSpeed);
            bw.Write(attackAngle);
            bw.Write(warnAngel);
            if (skillList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)skillList.Count);
                foreach (RoleSkill temp in skillList)
                {
                    temp.Serialize(bw);
                }
            }
            if (normalAttackList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)normalAttackList.Count);
                foreach (NormalAttackData temp in normalAttackList)
                {
                    temp.Serialize(bw);
                }
            }

        }

        internal override void Deserialize(BinaryReader br)
        {

            roleId = br.ReadInt32();
            name = br.ReadString();
            titleName = br.ReadString();
            physicsAttack = br.ReadInt32();
            magicAttack = br.ReadInt32();
            defense = br.ReadInt32();
            magicResistance = br.ReadInt32();
            pCritical = br.ReadInt32();
            mCritical = br.ReadInt32();
            attackSpeed = br.ReadSingle();
            releaseSpeed = br.ReadInt32();
            maxHP = br.ReadInt32();
            maxMP = br.ReadInt32();
            rating = br.ReadInt32();
            dodge = br.ReadInt32();
            hardValue = br.ReadInt32();
            deftValue = br.ReadInt32();
            repHP = br.ReadInt32();
            repMP = br.ReadInt32();
            moveSpeed = br.ReadSingle();
            attackType = br.ReadInt32();
            warnRange = br.ReadSingle();
            attackRange = br.ReadSingle();
            turnSpeed = br.ReadInt32();
            attackAngle = br.ReadSingle();
            warnAngel = br.ReadSingle();
            int skillListCount = br.ReadInt16();
            skillList = new List<RoleSkill>();
            for (int i = 0; i < skillListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    RoleSkill obj = new RoleSkill();
                    obj.Deserialize(br);
                    skillList.Add(obj);
                }
            }
            int normalAttackListCount = br.ReadInt16();
            normalAttackList = new List<NormalAttackData>();
            for (int i = 0; i < normalAttackListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    NormalAttackData obj = new NormalAttackData();
                    obj.Deserialize(br);
                    normalAttackList.Add(obj);
                }
            }

        }
    }

    /// <summary>
    /// 怪物配置数据
    /// </summary>
    public class MonsterConfigData : HeroConfigData
    {

        internal float attackInterval;

        /// <summary>
        /// 攻击间隔
        /// </summary>
        public float AttackInterval
        {
            get
            {
                return this.attackInterval;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new MonsterConfigData();
        }

        internal override int CustomCode()
        {
            return 49535530;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            base.Serialize(bw);
            bw.Write(attackInterval);

        }

        internal override void Deserialize(BinaryReader br)
        {

            base.Deserialize(br);
            attackInterval = br.ReadSingle();

        }
    }

    /// <summary>
    /// 技能伤害
    /// </summary>
    public class SkillDamage : SkillEffect
    {

        internal override ConfigMetaData Clone()
        {
            return new SkillDamage();
        }

        internal override int CustomCode()
        {
            return 17690816;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            base.Serialize(bw);

        }

        internal override void Deserialize(BinaryReader br)
        {

            base.Deserialize(br);

        }
    }

    /// <summary>
    /// 技能作用范围
    /// </summary>
    public class SkillAffect : ConfigMetaData
    {

        internal int skillId;

        internal int affectId;

        internal int type;

        internal int rangeType;

        internal float rangeAngle;

        internal float rangeRadis;

        internal int limit;

        [SkipAttr()]
        internal List<SkillEffect> effectList;

        [SkipAttr()]
        internal List<SkillDamage> damageList;

        [SkipAttr()]
        internal List<SkillBuff> buffList;

        /// <summary>
        /// 技能ID
        /// </summary>
        public int SkillId
        {
            get
            {
                return this.skillId;
            }
        }

        /// <summary>
        /// 作用ID
        /// </summary>
        public int AffectId
        {
            get
            {
                return this.affectId;
            }
        }

        /// <summary>
        /// 类型
        /// </summary>
        public int Type
        {
            get
            {
                return this.type;
            }
        }

        /// <summary>
        /// 范围形状
        /// </summary>
        public int RangeType
        {
            get
            {
                return this.rangeType;
            }
        }

        /// <summary>
        /// 范围大小X
        /// </summary>
        public float RangeAngle
        {
            get
            {
                return this.rangeAngle;
            }
        }

        /// <summary>
        /// 范围大小Y
        /// </summary>
        public float RangeRadis
        {
            get
            {
                return this.rangeRadis;
            }
        }

        /// <summary>
        /// 上限
        /// </summary>
        public int Limit
        {
            get
            {
                return this.limit;
            }
        }

        /// <summary>
        /// 技能特效List
        /// </summary>
        public List<SkillEffect> EffectList
        {
            get
            {
                return this.effectList;
            }
        }

        /// <summary>
        /// 技能伤害List
        /// </summary>
        public List<SkillDamage> DamageList
        {
            get
            {
                return this.damageList;
            }
        }

        /// <summary>
        /// 技能状态List
        /// </summary>
        public List<SkillBuff> BuffList
        {
            get
            {
                return this.buffList;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new SkillAffect();
        }

        internal override int CustomCode()
        {
            return 54234833;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(skillId);
            bw.Write(affectId);
            bw.Write(type);
            bw.Write(rangeType);
            bw.Write(rangeAngle);
            bw.Write(rangeRadis);
            bw.Write(limit);
            if (effectList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)effectList.Count);
                foreach (SkillEffect temp in effectList)
                {
                    temp.Serialize(bw);
                }
            }
            if (damageList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)damageList.Count);
                foreach (SkillDamage temp in damageList)
                {
                    temp.Serialize(bw);
                }
            }
            if (buffList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)buffList.Count);
                foreach (SkillBuff temp in buffList)
                {
                    temp.Serialize(bw);
                }
            }

        }

        internal override void Deserialize(BinaryReader br)
        {

            skillId = br.ReadInt32();
            affectId = br.ReadInt32();
            type = br.ReadInt32();
            rangeType = br.ReadInt32();
            rangeAngle = br.ReadSingle();
            rangeRadis = br.ReadSingle();
            limit = br.ReadInt32();
            int effectListCount = br.ReadInt16();
            effectList = new List<SkillEffect>();
            for (int i = 0; i < effectListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    SkillEffect obj = new SkillEffect();
                    obj.Deserialize(br);
                    effectList.Add(obj);
                }
            }
            int damageListCount = br.ReadInt16();
            damageList = new List<SkillDamage>();
            for (int i = 0; i < damageListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    SkillDamage obj = new SkillDamage();
                    obj.Deserialize(br);
                    damageList.Add(obj);
                }
            }
            int buffListCount = br.ReadInt16();
            buffList = new List<SkillBuff>();
            for (int i = 0; i < buffListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    SkillBuff obj = new SkillBuff();
                    obj.Deserialize(br);
                    buffList.Add(obj);
                }
            }

        }
    }

    /// <summary>
    /// 技能数据
    /// </summary>
    public class SkillData : ConfigMetaData
    {

        internal int skillId;

        internal string skillName;

        internal float cdTime;

        internal float releaseDis;

        internal float releasePercent;

        internal bool isTarget;

        internal string skillDesc;

        [SkipAttr()]
        internal List<SkillCondition> conditionList;

        [SkipAttr()]
        internal List<SkillAffect> affectList;

        [SkipAttr()]
        internal List<SkillSpecialEffect> specialList;

        /// <summary>
        /// 技能ID
        /// </summary>
        public int SkillId
        {
            get
            {
                return this.skillId;
            }
        }

        /// <summary>
        /// 技能名称
        /// </summary>
        public string SkillName
        {
            get
            {
                return this.skillName;
            }
        }

        /// <summary>
        /// 技能冷却
        /// </summary>
        public float CdTime
        {
            get
            {
                return this.cdTime;
            }
        }

        /// <summary>
        /// 技能施法距离固定值
        /// </summary>
        public float ReleaseDis
        {
            get
            {
                return this.releaseDis;
            }
        }

        /// <summary>
        /// 技能施法距离百分值
        /// </summary>
        public float ReleasePercent
        {
            get
            {
                return this.releasePercent;
            }
        }

        /// <summary>
        /// 有无目标
        /// </summary>
        public bool IsTarget
        {
            get
            {
                return this.isTarget;
            }
        }

        /// <summary>
        /// 技能描述
        /// </summary>
        public string SkillDesc
        {
            get
            {
                return this.skillDesc;
            }
        }

        /// <summary>
        /// 技能条件List
        /// </summary>
        public List<SkillCondition> ConditionList
        {
            get
            {
                return this.conditionList;
            }
        }

        /// <summary>
        /// 技能作用范围List
        /// </summary>
        public List<SkillAffect> AffectList
        {
            get
            {
                return this.affectList;
            }
        }

        /// <summary>
        /// 技能特效效果List
        /// </summary>
        public List<SkillSpecialEffect> SpecialList
        {
            get
            {
                return this.specialList;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new SkillData();
        }

        internal override int CustomCode()
        {
            return 9035653;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(skillId);
            bw.Write(skillName);
            bw.Write(cdTime);
            bw.Write(releaseDis);
            bw.Write(releasePercent);
            bw.Write(isTarget);
            bw.Write(skillDesc);
            if (conditionList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)conditionList.Count);
                foreach (SkillCondition temp in conditionList)
                {
                    temp.Serialize(bw);
                }
            }
            if (affectList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)affectList.Count);
                foreach (SkillAffect temp in affectList)
                {
                    temp.Serialize(bw);
                }
            }
            if (specialList == null)
            {
                bw.Write((short)0);
            }
            else
            {
                bw.Write((short)specialList.Count);
                foreach (SkillSpecialEffect temp in specialList)
                {
                    temp.Serialize(bw);
                }
            }

        }

        internal override void Deserialize(BinaryReader br)
        {

            skillId = br.ReadInt32();
            skillName = br.ReadString();
            cdTime = br.ReadSingle();
            releaseDis = br.ReadSingle();
            releasePercent = br.ReadSingle();
            isTarget = br.ReadBoolean();
            skillDesc = br.ReadString();
            int conditionListCount = br.ReadInt16();
            conditionList = new List<SkillCondition>();
            for (int i = 0; i < conditionListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    SkillCondition obj = new SkillCondition();
                    obj.Deserialize(br);
                    conditionList.Add(obj);
                }
            }
            int affectListCount = br.ReadInt16();
            affectList = new List<SkillAffect>();
            for (int i = 0; i < affectListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    SkillAffect obj = new SkillAffect();
                    obj.Deserialize(br);
                    affectList.Add(obj);
                }
            }
            int specialListCount = br.ReadInt16();
            specialList = new List<SkillSpecialEffect>();
            for (int i = 0; i < specialListCount; i++)
            {
                if (br.ReadBoolean())
                {
                    SkillSpecialEffect obj = new SkillSpecialEffect();
                    obj.Deserialize(br);
                    specialList.Add(obj);
                }
            }

        }
    }

    /// <summary>
    /// 普通攻击数据
    /// </summary>
    public class NormalAttackData : ConfigMetaData
    {

        internal int roleid;

        internal int index;

        internal float frontTime;

        internal float cancelTime;

        internal float afterTime;

        internal int hitType;

        internal float percent;

        internal int damageValue;

        internal int hitEffectId;

        internal int effectId;

        internal int attackEffectId;

        internal float x;

        internal float y;

        internal float z;

        internal int floatAirForce;

        internal int blowFly;

        internal bool constraint;

        [SkipAttr()]
        internal EffectData hitEffectData;

        [SkipAttr()]
        internal EffectData effectIdData;

        [SkipAttr()]
        internal EffectData attackEffectIdData;

        /// <summary>
        /// 英雄id
        /// </summary>
        public int Roleid
        {
            get
            {
                return this.roleid;
            }
        }

        /// <summary>
        /// 段数
        /// </summary>
        public int Index
        {
            get
            {
                return this.index;
            }
        }

        /// <summary>
        /// 前摇僵直
        /// </summary>
        public float FrontTime
        {
            get
            {
                return this.frontTime;
            }
        }

        /// <summary>
        /// 指令接收时间
        /// </summary>
        public float CancelTime
        {
            get
            {
                return this.cancelTime;
            }
        }

        /// <summary>
        /// 后摇动画计算伤害
        /// </summary>
        public float AfterTime
        {
            get
            {
                return this.afterTime;
            }
        }

        /// <summary>
        /// 伤害类型
        /// </summary>
        public int HitType
        {
            get
            {
                return this.hitType;
            }
        }

        /// <summary>
        /// 攻击百分比
        /// </summary>
        public float Percent
        {
            get
            {
                return this.percent;
            }
        }

        /// <summary>
        /// 伤害
        /// </summary>
        public int DamageValue
        {
            get
            {
                return this.damageValue;
            }
        }

        /// <summary>
        /// 受击特效
        /// </summary>
        public int HitEffectId
        {
            get
            {
                return this.hitEffectId;
            }
        }

        /// <summary>
        /// 特效名称
        /// </summary>
        public int EffectId
        {
            get
            {
                return this.effectId;
            }
        }

        /// <summary>
        /// 攻击特效
        /// </summary>
        public int AttackEffectId
        {
            get
            {
                return this.attackEffectId;
            }
        }

        /// <summary>
        /// 发射点x
        /// </summary>
        public float X
        {
            get
            {
                return this.x;
            }
        }

        /// <summary>
        /// 发射点y
        /// </summary>
        public float Y
        {
            get
            {
                return this.y;
            }
        }

        /// <summary>
        /// 发射点z
        /// </summary>
        public float Z
        {
            get
            {
                return this.z;
            }
        }

        /// <summary>
        /// 浮空力
        /// </summary>
        public int FloatAirForce
        {
            get
            {
                return this.floatAirForce;
            }
        }

        /// <summary>
        /// 击飞
        /// </summary>
        public int BlowFly
        {
            get
            {
                return this.blowFly;
            }
        }

        /// <summary>
        /// 强制
        /// </summary>
        public bool Constraint
        {
            get
            {
                return this.constraint;
            }
        }

        /// <summary>
        /// 受击特效数据
        /// </summary>
        public EffectData HitEffectData
        {
            get
            {
                return this.hitEffectData;
            }
        }

        /// <summary>
        /// 特效名称
        /// </summary>
        public EffectData EffectIdData
        {
            get
            {
                return this.effectIdData;
            }
        }

        /// <summary>
        /// 攻击特效数据
        /// </summary>
        public EffectData AttackEffectIdData
        {
            get
            {
                return this.attackEffectIdData;
            }
        }

        internal override ConfigMetaData Clone()
        {
            return new NormalAttackData();
        }

        internal override int CustomCode()
        {
            return 34917486;
        }

        internal override void Serialize(BinaryWriter bw)
        {

            bw.Write(roleid);
            bw.Write(index);
            bw.Write(frontTime);
            bw.Write(cancelTime);
            bw.Write(afterTime);
            bw.Write(hitType);
            bw.Write(percent);
            bw.Write(damageValue);
            bw.Write(hitEffectId);
            bw.Write(effectId);
            bw.Write(attackEffectId);
            bw.Write(x);
            bw.Write(y);
            bw.Write(z);
            bw.Write(floatAirForce);
            bw.Write(blowFly);
            bw.Write(constraint);
            if (hitEffectData != null)
            {
                bw.Write(true);
                hitEffectData.Serialize(bw);
            }
            else
            {
                bw.Write(false);
            }
            if (effectIdData != null)
            {
                bw.Write(true);
                effectIdData.Serialize(bw);
            }
            else
            {
                bw.Write(false);
            }
            if (attackEffectIdData != null)
            {
                bw.Write(true);
                attackEffectIdData.Serialize(bw);
            }
            else
            {
                bw.Write(false);
            }

        }

        internal override void Deserialize(BinaryReader br)
        {

            roleid = br.ReadInt32();
            index = br.ReadInt32();
            frontTime = br.ReadSingle();
            cancelTime = br.ReadSingle();
            afterTime = br.ReadSingle();
            hitType = br.ReadInt32();
            percent = br.ReadSingle();
            damageValue = br.ReadInt32();
            hitEffectId = br.ReadInt32();
            effectId = br.ReadInt32();
            attackEffectId = br.ReadInt32();
            x = br.ReadSingle();
            y = br.ReadSingle();
            z = br.ReadSingle();
            floatAirForce = br.ReadInt32();
            blowFly = br.ReadInt32();
            constraint = br.ReadBoolean();
            if (br.ReadBoolean())
            {
                hitEffectData = new EffectData();
                hitEffectData.Deserialize(br);
            }
            if (br.ReadBoolean())
            {
                effectIdData = new EffectData();
                effectIdData.Deserialize(br);
            }
            if (br.ReadBoolean())
            {
                attackEffectIdData = new EffectData();
                attackEffectIdData.Deserialize(br);
            }

        }
    }

    internal class LoadType
    {

        internal static ConfigMetaData Get(int hc)
        {
            ConfigMetaData cmd = null;
            switch (hc)
            {
                case 2637164:
                    cmd = new Level();
                    break;
                case 41014879:
                    cmd = new Chapter();
                    break;
                case 3888474:
                    cmd = new LevelCondition();
                    break;
                case 25209742:
                    cmd = new RoleSkill();
                    break;
                case 26966483:
                    cmd = new EffectData();
                    break;
                case 31884011:
                    cmd = new SkillCondition();
                    break;
                case 32176063:
                    cmd = new SkillTime();
                    break;
                case 44150175:
                    cmd = new SkillSpecialEffect();
                    break;
                case 65326725:
                    cmd = new SkillEffect();
                    break;
                case 61150033:
                    cmd = new SkillBuff();
                    break;
                case 24123405:
                    cmd = new HeroConfigData();
                    break;
                case 49535530:
                    cmd = new MonsterConfigData();
                    break;
                case 17690816:
                    cmd = new SkillDamage();
                    break;
                case 54234833:
                    cmd = new SkillAffect();
                    break;
                case 9035653:
                    cmd = new SkillData();
                    break;
                case 34917486:
                    cmd = new NormalAttackData();
                    break;
            }
            return cmd;

        }

        internal static int GetCode(string name)
        {
            int i = 0;
            switch (name)
            {
                case "Level":
                    i = 2637164;
                    break;
                case "Chapter":
                    i = 41014879;
                    break;
                case "LevelCondition":
                    i = 3888474;
                    break;
                case "RoleSkill":
                    i = 25209742;
                    break;
                case "EffectData":
                    i = 26966483;
                    break;
                case "SkillCondition":
                    i = 31884011;
                    break;
                case "SkillTime":
                    i = 32176063;
                    break;
                case "SkillSpecialEffect":
                    i = 44150175;
                    break;
                case "SkillEffect":
                    i = 65326725;
                    break;
                case "SkillBuff":
                    i = 61150033;
                    break;
                case "HeroConfigData":
                    i = 24123405;
                    break;
                case "MonsterConfigData":
                    i = 49535530;
                    break;
                case "SkillDamage":
                    i = 17690816;
                    break;
                case "SkillAffect":
                    i = 54234833;
                    break;
                case "SkillData":
                    i = 9035653;
                    break;
                case "NormalAttackData":
                    i = 34917486;
                    break;
            }
            return i;

        }

        internal static void Init()
        {
            foreach (Level temp in ConfigManager.GetList<Level>())
            {
                temp.chapter = ConfigManager.GetList<Chapter>().Find(delegate(Chapter obj)
                {
                    return obj.id == temp.chapterId;
                });
            }
            foreach (Chapter temp in ConfigManager.GetList<Chapter>())
            {
                temp.levelList = ConfigManager.GetList<Level>().FindAll(
                delegate(Level obj)
                {
                    return obj.chapterId == temp.id;
                });
            }
            foreach (RoleSkill temp in ConfigManager.GetList<RoleSkill>())
            {
                temp.skillData = ConfigManager.GetList<SkillData>().Find(delegate(SkillData obj)
                {
                    return obj.skillId == temp.skillId;
                });
            }
            foreach (SkillSpecialEffect temp in ConfigManager.GetList<SkillSpecialEffect>())
            {
                temp.effectIdData = ConfigManager.GetList<EffectData>().Find(delegate(EffectData obj)
                {
                    return obj.effectId == temp.effectID;
                });
            }
            foreach (SkillEffect temp in ConfigManager.GetList<SkillEffect>())
            {
                string[] sList = temp.timeId.Split('&');
                temp.timeList = ConfigManager.GetList<SkillTime>().FindAll(
                delegate(SkillTime obj)
                {
                    foreach (string mys in sList) { int id = int.Parse(mys); return obj.timeid == id && obj.skillId == temp.skillId; }
                    return false;
                });
            }
            foreach (SkillBuff temp in ConfigManager.GetList<SkillBuff>())
            {
                string[] sList = temp.timeId.Split('&');
                temp.timeList = ConfigManager.GetList<SkillTime>().FindAll(
                delegate(SkillTime obj)
                {
                    foreach (string mys in sList) { int id = int.Parse(mys); return obj.skillId == temp.skillId && obj.timeid == id; }
                    return false;
                });
            }
            foreach (HeroConfigData temp in ConfigManager.GetList<HeroConfigData>())
            {
                temp.skillList = ConfigManager.GetList<RoleSkill>().FindAll(
                delegate(RoleSkill obj)
                {
                    return obj.roleId == temp.roleId;
                });
                temp.normalAttackList = ConfigManager.GetList<NormalAttackData>().FindAll(
                delegate(NormalAttackData obj)
                {
                    return obj.roleid == temp.roleId;
                });
            }
            foreach (MonsterConfigData temp in ConfigManager.GetList<MonsterConfigData>())
            {
                temp.skillList = ConfigManager.GetList<RoleSkill>().FindAll(
                delegate(RoleSkill obj)
                {
                    return obj.roleId == temp.roleId;
                });
                temp.normalAttackList = ConfigManager.GetList<NormalAttackData>().FindAll(
                delegate(NormalAttackData obj)
                {
                    return obj.roleid == temp.roleId;
                });
            }
            foreach (SkillDamage temp in ConfigManager.GetList<SkillDamage>())
            {
                string[] sList = temp.timeId.Split('&');
                temp.timeList = ConfigManager.GetList<SkillTime>().FindAll(
                delegate(SkillTime obj)
                {
                    foreach (string mys in sList) { int id = int.Parse(mys); return obj.timeid == id && obj.skillId == temp.skillId; }
                    return false;
                });
            }
            foreach (SkillAffect temp in ConfigManager.GetList<SkillAffect>())
            {
                temp.effectList = ConfigManager.GetList<SkillEffect>().FindAll(
                delegate(SkillEffect obj)
                {
                    return obj.affectId == temp.affectId && obj.skillId == temp.skillId;
                });
                temp.damageList = ConfigManager.GetList<SkillDamage>().FindAll(
                delegate(SkillDamage obj)
                {
                    return obj.skillId == temp.skillId && obj.affectId == temp.affectId;
                });
                temp.buffList = ConfigManager.GetList<SkillBuff>().FindAll(
                delegate(SkillBuff obj)
                {
                    return obj.skillId == temp.skillId && obj.affectId == temp.affectId;
                });
            }
            foreach (SkillData temp in ConfigManager.GetList<SkillData>())
            {
                temp.conditionList = ConfigManager.GetList<SkillCondition>().FindAll(
                delegate(SkillCondition obj)
                {
                    return obj.skillId == temp.skillId;
                });
                temp.affectList = ConfigManager.GetList<SkillAffect>().FindAll(
                delegate(SkillAffect obj)
                {
                    return obj.skillId == temp.skillId;
                });
                temp.specialList = ConfigManager.GetList<SkillSpecialEffect>().FindAll(
                delegate(SkillSpecialEffect obj)
                {
                    return obj.skillId == temp.skillId;
                });
            }
            foreach (NormalAttackData temp in ConfigManager.GetList<NormalAttackData>())
            {
                temp.hitEffectData = ConfigManager.GetList<EffectData>().Find(delegate(EffectData obj)
                {
                    return obj.effectId == temp.hitEffectId;
                });
                temp.effectIdData = ConfigManager.GetList<EffectData>().Find(delegate(EffectData obj)
                {
                    return obj.effectId == temp.effectId;
                });
                temp.attackEffectIdData = ConfigManager.GetList<EffectData>().Find(delegate(EffectData obj)
                {
                    return obj.effectId == temp.attackEffectId;
                });
            }

        }
    }


    public abstract class ConfigMetaData
    {
        internal abstract int CustomCode();
        internal abstract void Serialize(BinaryWriter bw);
        internal abstract void Deserialize(BinaryReader br);
        internal abstract ConfigMetaData Clone();
    }


    public sealed class ConfigManager
    {
        private static Dictionary<int, IList> allDataList = new Dictionary<int, IList>();

        private static void Add(IList list, int hc)
        {
            if (!allDataList.ContainsKey(hc))
            {
                allDataList.Add(hc, list);
            }
        }


        /// <summary>
        /// 从byte数组加载
        /// </summary>
        /// <param name="dataList"></param>
        public static void Load(byte[] dataList)
        {
            BinaryReader br = new BinaryReader(new MemoryStream(dataList));
            br.ReadString();
            int count = br.ReadInt32();
            for (int i = 0; i < count; i++)
            {
                int hc = br.ReadInt32();
                ConfigMetaData cmd = LoadType.Get(hc);
                IList list = (IList)Activator.CreateInstance(typeof(List<>).MakeGenericType(cmd.GetType()));
                int listCount = br.ReadInt32();
                for (int j = 0; j < listCount; j++)
                {
                    cmd = cmd.Clone();
                    cmd.Deserialize(br);
                    list.Add(cmd);
                }
                if (allDataList.ContainsKey(hc))
                {
                    allDataList[hc] = list;
                }
                else
                {
                    allDataList.Add(hc, list);
                }
            }
            br.Close();
            br = null;
            dataList = null;
            LoadType.Init();
            System.GC.Collect();
        }

        /// <summary>
        /// 转成byte数组
        /// </summary>
        /// <returns></returns>
        public static byte[] ToBinary()
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter bw = new BinaryWriter(ms);
            bw.Write("0");
            int count = 0;
            foreach (IList list in allDataList.Values)
            {
                if (list.Count > 0)
                {
                    count++;
                }
            }
            bw.Write(count);
            foreach (IList list in allDataList.Values)
            {
                if (list.Count > 0)
                {
                    bw.Write(((ConfigMetaData)list[0]).CustomCode());
                    bw.Write(list.Count);
                    foreach (ConfigMetaData cmd in list)
                    {
                        cmd.Serialize(bw);
                    }
                }
            }
            byte[] temp = ms.ToArray();
            ms.Close();
            bw.Close();
            ms = null;
            bw = null;
            return temp;
        }

        public static IList GetList(Type t)
        {
            int hc = LoadType.GetCode(t.Name);
            if (allDataList.ContainsKey(hc))
            {
                return allDataList[hc];
            }
            return new ArrayList();
        }

        public static List<T> GetList<T>() where T : ConfigMetaData
        {

            int hc = LoadType.GetCode(typeof(T).Name);
            if (allDataList.ContainsKey(hc))
            {
                return allDataList[hc] as List<T>;
            }
            return new List<T>();
        }

        /// <summary>
        /// 获得集合
        /// </summary>
        /// <typeparam name="T">类型</typeparam>
        /// <param name="callBack">存在次类型集合则回调</param>
        public static void GetList<T>(System.Action<List<T>> callBack) where T : ConfigMetaData
        {
            int hc = LoadType.GetCode(typeof(T).Name);
            if (allDataList.ContainsKey(hc))
            {
                callBack(allDataList[hc] as List<T>);
            }
        }
    }
}
