//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5485
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConfigData
{
    using System;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using System.Collections;
    
    
    public class SkipAttr : System.Attribute
    {
    }
    
    public class Chapter : ConfigMetaData
    {
        
        internal Int32 id;
        
        internal String name;
        
        [SkipAttr()]
        internal List<Level> levelList;
        
        public Int32 Id
        {
            get
            {
                return this.id;
            }
        }
        
        public String Name
        {
            get
            {
                return this.name;
            }
        }
        
        public List<Level> LevelList
        {
            get
            {
                return this.levelList;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new Chapter();
        }
        
        internal override int CustomCode()
        {
return 1927240;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(id);
			bw.Write(name);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			id = br.ReadInt32();
			name = br.ReadString();

        }
    }
    
    public class Level : ConfigMetaData
    {
        
        internal Int32 id;
        
        internal Int32 chapterId;
        
        internal String name;
        
        [SkipAttr()]
        internal Chapter chapter;
        
        public Int32 Id
        {
            get
            {
                return this.id;
            }
        }
        
        public Int32 ChapterId
        {
            get
            {
                return this.chapterId;
            }
        }
        
        public String Name
        {
            get
            {
                return this.name;
            }
        }
        
        public Chapter Chapter
        {
            get
            {
                return this.chapter;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new Level();
        }
        
        internal override int CustomCode()
        {
return 1927488;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(id);
			bw.Write(chapterId);
			bw.Write(name);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			id = br.ReadInt32();
			chapterId = br.ReadInt32();
			name = br.ReadString();

        }
    }
    
    public class LevelCondition : ConfigMetaData
    {
        
        internal Int32 id;
        
        internal Int32 levelId;
        
        internal Int32 conditionType;
        
        internal String conditionValue;
        
        public Int32 Id
        {
            get
            {
                return this.id;
            }
        }
        
        public Int32 LevelId
        {
            get
            {
                return this.levelId;
            }
        }
        
        public Int32 ConditionType
        {
            get
            {
                return this.conditionType;
            }
        }
        
        public String ConditionValue
        {
            get
            {
                return this.conditionValue;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new LevelCondition();
        }
        
        internal override int CustomCode()
        {
return 1927736;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(id);
			bw.Write(levelId);
			bw.Write(conditionType);
			bw.Write(conditionValue);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			id = br.ReadInt32();
			levelId = br.ReadInt32();
			conditionType = br.ReadInt32();
			conditionValue = br.ReadString();

        }
    }
    
    public class HeroConfigData : ConfigMetaData
    {
        
        internal Int32 roleId;
        
        internal String name;
        
        internal String titleName;
        
        internal Int32 physicsAttack;
        
        internal Int32 magicAttack;
        
        internal Int32 defense;
        
        internal Int32 magicResistance;
        
        internal Int32 pCritical;
        
        internal Int32 mCritical;
        
        internal Single attackSpeed;
        
        internal Int32 releaseSpeed;
        
        internal Int32 maxHP;
        
        internal Int32 maxMP;
        
        internal Int32 rating;
        
        internal Int32 dodge;
        
        internal Int32 hardValue;
        
        internal Int32 deftValue;
        
        internal Int32 repHP;
        
        internal Int32 repMP;
        
        internal Single moveSpeed;
        
        internal Int32 attackType;
        
        internal Single warnRange;
        
        internal Single attackRange;
        
        internal Int32 turnSpeed;
        
        internal Single attackAngle;
        
        internal Single warnAngel;
        
        [SkipAttr()]
        internal List<NormalAttackData> normalAttackList;
        
        public Int32 RoleId
        {
            get
            {
                return this.roleId;
            }
        }
        
        public String Name
        {
            get
            {
                return this.name;
            }
        }
        
        public String TitleName
        {
            get
            {
                return this.titleName;
            }
        }
        
        public Int32 PhysicsAttack
        {
            get
            {
                return this.physicsAttack;
            }
        }
        
        public Int32 MagicAttack
        {
            get
            {
                return this.magicAttack;
            }
        }
        
        public Int32 Defense
        {
            get
            {
                return this.defense;
            }
        }
        
        public Int32 MagicResistance
        {
            get
            {
                return this.magicResistance;
            }
        }
        
        public Int32 PCritical
        {
            get
            {
                return this.pCritical;
            }
        }
        
        public Int32 MCritical
        {
            get
            {
                return this.mCritical;
            }
        }
        
        public Single AttackSpeed
        {
            get
            {
                return this.attackSpeed;
            }
        }
        
        public Int32 ReleaseSpeed
        {
            get
            {
                return this.releaseSpeed;
            }
        }
        
        public Int32 MaxHP
        {
            get
            {
                return this.maxHP;
            }
        }
        
        public Int32 MaxMP
        {
            get
            {
                return this.maxMP;
            }
        }
        
        public Int32 Rating
        {
            get
            {
                return this.rating;
            }
        }
        
        public Int32 Dodge
        {
            get
            {
                return this.dodge;
            }
        }
        
        public Int32 HardValue
        {
            get
            {
                return this.hardValue;
            }
        }
        
        public Int32 DeftValue
        {
            get
            {
                return this.deftValue;
            }
        }
        
        public Int32 RepHP
        {
            get
            {
                return this.repHP;
            }
        }
        
        public Int32 RepMP
        {
            get
            {
                return this.repMP;
            }
        }
        
        public Single MoveSpeed
        {
            get
            {
                return this.moveSpeed;
            }
        }
        
        public Int32 AttackType
        {
            get
            {
                return this.attackType;
            }
        }
        
        public Single WarnRange
        {
            get
            {
                return this.warnRange;
            }
        }
        
        public Single AttackRange
        {
            get
            {
                return this.attackRange;
            }
        }
        
        public Int32 TurnSpeed
        {
            get
            {
                return this.turnSpeed;
            }
        }
        
        public Single AttackAngle
        {
            get
            {
                return this.attackAngle;
            }
        }
        
        public Single WarnAngel
        {
            get
            {
                return this.warnAngel;
            }
        }
        
        public List<NormalAttackData> NormalAttackList
        {
            get
            {
                return this.normalAttackList;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new HeroConfigData();
        }
        
        internal override int CustomCode()
        {
return 1928352;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(roleId);
			bw.Write(name);
			bw.Write(titleName);
			bw.Write(physicsAttack);
			bw.Write(magicAttack);
			bw.Write(defense);
			bw.Write(magicResistance);
			bw.Write(pCritical);
			bw.Write(mCritical);
			bw.Write(attackSpeed);
			bw.Write(releaseSpeed);
			bw.Write(maxHP);
			bw.Write(maxMP);
			bw.Write(rating);
			bw.Write(dodge);
			bw.Write(hardValue);
			bw.Write(deftValue);
			bw.Write(repHP);
			bw.Write(repMP);
			bw.Write(moveSpeed);
			bw.Write(attackType);
			bw.Write(warnRange);
			bw.Write(attackRange);
			bw.Write(turnSpeed);
			bw.Write(attackAngle);
			bw.Write(warnAngel);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			roleId = br.ReadInt32();
			name = br.ReadString();
			titleName = br.ReadString();
			physicsAttack = br.ReadInt32();
			magicAttack = br.ReadInt32();
			defense = br.ReadInt32();
			magicResistance = br.ReadInt32();
			pCritical = br.ReadInt32();
			mCritical = br.ReadInt32();
			attackSpeed = br.ReadSingle();
			releaseSpeed = br.ReadInt32();
			maxHP = br.ReadInt32();
			maxMP = br.ReadInt32();
			rating = br.ReadInt32();
			dodge = br.ReadInt32();
			hardValue = br.ReadInt32();
			deftValue = br.ReadInt32();
			repHP = br.ReadInt32();
			repMP = br.ReadInt32();
			moveSpeed = br.ReadSingle();
			attackType = br.ReadInt32();
			warnRange = br.ReadSingle();
			attackRange = br.ReadSingle();
			turnSpeed = br.ReadInt32();
			attackAngle = br.ReadSingle();
			warnAngel = br.ReadSingle();

        }
    }
    
    public class MonsterConfigData : HeroConfigData
    {
        
        internal Single attackInterval;
        
        public Single AttackInterval
        {
            get
            {
                return this.attackInterval;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new MonsterConfigData();
        }
        
        internal override int CustomCode()
        {
return 1928552;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

base.Serialize(bw);
			bw.Write(attackInterval);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

base.Deserialize(br);
			attackInterval = br.ReadSingle();

        }
    }
    
    public class NormalAttackData : ConfigMetaData
    {
        
        internal Int32 roleid;
        
        internal Int32 index;
        
        internal Single frontTime;
        
        internal Single cancelTime;
        
        internal Single afterTime;
        
        internal Single bulletSpeed;
        
        internal Int32 hitType;
        
        internal String effectName;
        
        internal Int32 direction;
        
        internal Single x;
        
        internal Single y;
        
        internal Single z;
        
        public Int32 Roleid
        {
            get
            {
                return this.roleid;
            }
        }
        
        public Int32 Index
        {
            get
            {
                return this.index;
            }
        }
        
        public Single FrontTime
        {
            get
            {
                return this.frontTime;
            }
        }
        
        public Single CancelTime
        {
            get
            {
                return this.cancelTime;
            }
        }
        
        public Single AfterTime
        {
            get
            {
                return this.afterTime;
            }
        }
        
        public Single BulletSpeed
        {
            get
            {
                return this.bulletSpeed;
            }
        }
        
        public Int32 HitType
        {
            get
            {
                return this.hitType;
            }
        }
        
        public String EffectName
        {
            get
            {
                return this.effectName;
            }
        }
        
        public Int32 Direction
        {
            get
            {
                return this.direction;
            }
        }
        
        public Single X
        {
            get
            {
                return this.x;
            }
        }
        
        public Single Y
        {
            get
            {
                return this.y;
            }
        }
        
        public Single Z
        {
            get
            {
                return this.z;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new NormalAttackData();
        }
        
        internal override int CustomCode()
        {
return 1928928;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(roleid);
			bw.Write(index);
			bw.Write(frontTime);
			bw.Write(cancelTime);
			bw.Write(afterTime);
			bw.Write(bulletSpeed);
			bw.Write(hitType);
			bw.Write(effectName);
			bw.Write(direction);
			bw.Write(x);
			bw.Write(y);
			bw.Write(z);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			roleid = br.ReadInt32();
			index = br.ReadInt32();
			frontTime = br.ReadSingle();
			cancelTime = br.ReadSingle();
			afterTime = br.ReadSingle();
			bulletSpeed = br.ReadSingle();
			hitType = br.ReadInt32();
			effectName = br.ReadString();
			direction = br.ReadInt32();
			x = br.ReadSingle();
			y = br.ReadSingle();
			z = br.ReadSingle();

        }
    }
    
    public class SkillData : ConfigMetaData
    {
        
        internal Int32 skillId;
        
        internal String skillName;
        
        internal String skillDesc;
        
        [SkipAttr()]
        internal List<SkillCondition> conditionList;
        
        [SkipAttr()]
        internal List<SkillAffect> affectList;
        
        public Int32 SkillId
        {
            get
            {
                return this.skillId;
            }
        }
        
        public String SkillName
        {
            get
            {
                return this.skillName;
            }
        }
        
        public String SkillDesc
        {
            get
            {
                return this.skillDesc;
            }
        }
        
        public List<SkillCondition> ConditionList
        {
            get
            {
                return this.conditionList;
            }
        }
        
        public List<SkillAffect> AffectList
        {
            get
            {
                return this.affectList;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new SkillData();
        }
        
        internal override int CustomCode()
        {
return 1929192;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(skillId);
			bw.Write(skillName);
			bw.Write(skillDesc);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			skillId = br.ReadInt32();
			skillName = br.ReadString();
			skillDesc = br.ReadString();

        }
    }
    
    public class SkillCondition : ConfigMetaData
    {
        
        internal Int32 skillId;
        
        internal Int32 type;
        
        internal Single value;
        
        internal Single percent;
        
        internal Int32 logicSymbol;
        
        public Int32 SkillId
        {
            get
            {
                return this.skillId;
            }
        }
        
        public Int32 Type
        {
            get
            {
                return this.type;
            }
        }
        
        public Single Value
        {
            get
            {
                return this.value;
            }
        }
        
        public Single Percent
        {
            get
            {
                return this.percent;
            }
        }
        
        public Int32 LogicSymbol
        {
            get
            {
                return this.logicSymbol;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new SkillCondition();
        }
        
        internal override int CustomCode()
        {
return 1929432;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(skillId);
			bw.Write(type);
			bw.Write(value);
			bw.Write(percent);
			bw.Write(logicSymbol);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			skillId = br.ReadInt32();
			type = br.ReadInt32();
			value = br.ReadSingle();
			percent = br.ReadSingle();
			logicSymbol = br.ReadInt32();

        }
    }
    
    public class SkillEffect : ConfigMetaData
    {
        
        internal Int32 skillId;
        
        internal Int32 affectId;
        
        internal Int32 type;
        
        internal Single value;
        
        internal Single percent;
        
        internal String timeId;
        
        internal List<SkillTime> timeList;
        
        public Int32 SkillId
        {
            get
            {
                return this.skillId;
            }
        }
        
        public Int32 AffectId
        {
            get
            {
                return this.affectId;
            }
        }
        
        public Int32 Type
        {
            get
            {
                return this.type;
            }
        }
        
        public Single Value
        {
            get
            {
                return this.value;
            }
        }
        
        public Single Percent
        {
            get
            {
                return this.percent;
            }
        }
        
        public String TimeId
        {
            get
            {
                return this.timeId;
            }
        }
        
        public List<SkillTime> TimeList
        {
            get
            {
                return this.timeList;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new SkillEffect();
        }
        
        internal override int CustomCode()
        {
return 1929728;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(skillId);
			bw.Write(affectId);
			bw.Write(type);
			bw.Write(value);
			bw.Write(percent);
			bw.Write(timeId);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			skillId = br.ReadInt32();
			affectId = br.ReadInt32();
			type = br.ReadInt32();
			value = br.ReadSingle();
			percent = br.ReadSingle();
			timeId = br.ReadString();

        }
    }
    
    public class SkillBuff : ConfigMetaData
    {
        
        internal Int32 skillId;
        
        internal Int32 affectId;
        
        internal Int32 type;
        
        internal String timeId;
        
        internal List<SkillTime> timeList;
        
        public Int32 SkillId
        {
            get
            {
                return this.skillId;
            }
        }
        
        public Int32 AffectId
        {
            get
            {
                return this.affectId;
            }
        }
        
        public Int32 Type
        {
            get
            {
                return this.type;
            }
        }
        
        public String TimeId
        {
            get
            {
                return this.timeId;
            }
        }
        
        public List<SkillTime> TimeList
        {
            get
            {
                return this.timeList;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new SkillBuff();
        }
        
        internal override int CustomCode()
        {
return 1929992;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(skillId);
			bw.Write(affectId);
			bw.Write(type);
			bw.Write(timeId);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			skillId = br.ReadInt32();
			affectId = br.ReadInt32();
			type = br.ReadInt32();
			timeId = br.ReadString();

        }
    }
    
    public class SkillTime : ConfigMetaData
    {
        
        internal Int32 skillId;
        
        internal Int32 timeid;
        
        internal Int32 type;
        
        internal Single time;
        
        public Int32 SkillId
        {
            get
            {
                return this.skillId;
            }
        }
        
        public Int32 Timeid
        {
            get
            {
                return this.timeid;
            }
        }
        
        public Int32 Type
        {
            get
            {
                return this.type;
            }
        }
        
        public Single Time
        {
            get
            {
                return this.time;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new SkillTime();
        }
        
        internal override int CustomCode()
        {
return 1930216;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(skillId);
			bw.Write(timeid);
			bw.Write(type);
			bw.Write(time);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			skillId = br.ReadInt32();
			timeid = br.ReadInt32();
			type = br.ReadInt32();
			time = br.ReadSingle();

        }
    }
    
    public class SkillAffect : ConfigMetaData
    {
        
        internal Int32 skillId;
        
        internal Int32 affectId;
        
        internal Int32 type;
        
        internal Int32 rangeType;
        
        internal Single rangeAngle;
        
        internal Single rangeRadis;
        
        internal List<SkillEffect> effectList;
        
        public Int32 SkillId
        {
            get
            {
                return this.skillId;
            }
        }
        
        public Int32 AffectId
        {
            get
            {
                return this.affectId;
            }
        }
        
        public Int32 Type
        {
            get
            {
                return this.type;
            }
        }
        
        public Int32 RangeType
        {
            get
            {
                return this.rangeType;
            }
        }
        
        public Single RangeAngle
        {
            get
            {
                return this.rangeAngle;
            }
        }
        
        public Single RangeRadis
        {
            get
            {
                return this.rangeRadis;
            }
        }
        
        public List<SkillEffect> EffectList
        {
            get
            {
                return this.effectList;
            }
        }
        
        internal override ConfigMetaData Clone()
        {
return new SkillAffect();
        }
        
        internal override int CustomCode()
        {
return 1930512;
        }
        
        internal override void Serialize(BinaryWriter bw)
        {

			bw.Write(skillId);
			bw.Write(affectId);
			bw.Write(type);
			bw.Write(rangeType);
			bw.Write(rangeAngle);
			bw.Write(rangeRadis);

        }
        
        internal override void Deserialize(BinaryReader br)
        {

			skillId = br.ReadInt32();
			affectId = br.ReadInt32();
			type = br.ReadInt32();
			rangeType = br.ReadInt32();
			rangeAngle = br.ReadSingle();
			rangeRadis = br.ReadSingle();

        }
    }
    
    internal class LoadType
    {
        
        internal static ConfigMetaData Get(int hc)
        {
ConfigMetaData cmd = null;
switch(hc){
case 1927240 :
cmd = new Chapter();
break;
case 1927488 :
cmd = new Level();
break;
case 1927736 :
cmd = new LevelCondition();
break;
case 1928352 :
cmd = new HeroConfigData();
break;
case 1928552 :
cmd = new MonsterConfigData();
break;
case 1928928 :
cmd = new NormalAttackData();
break;
case 1929192 :
cmd = new SkillData();
break;
case 1929432 :
cmd = new SkillCondition();
break;
case 1929728 :
cmd = new SkillEffect();
break;
case 1929992 :
cmd = new SkillBuff();
break;
case 1930216 :
cmd = new SkillTime();
break;
case 1930512 :
cmd = new SkillAffect();
break;
}
return cmd;

        }
        
        internal static int GetCode(string name)
        {
int i = 0;
switch(name){
case "Chapter" :
i = 1927240;
break;
case "Level" :
i = 1927488;
break;
case "LevelCondition" :
i = 1927736;
break;
case "HeroConfigData" :
i = 1928352;
break;
case "MonsterConfigData" :
i = 1928552;
break;
case "NormalAttackData" :
i = 1928928;
break;
case "SkillData" :
i = 1929192;
break;
case "SkillCondition" :
i = 1929432;
break;
case "SkillEffect" :
i = 1929728;
break;
case "SkillBuff" :
i = 1929992;
break;
case "SkillTime" :
i = 1930216;
break;
case "SkillAffect" :
i = 1930512;
break;
}
return i;

        }
        
        internal static void Init()
        {
foreach(Chapter temp in ConfigManager.GetList<Chapter>())
{
temp.levelList= ConfigManager.GetList<Level>().FindAll(delegate(Level obj){ return obj.chapterId == temp.id;});
}
foreach(Level temp in ConfigManager.GetList<Level>())
{
temp.chapter= ConfigManager.GetList<Chapter>().Find(delegate(Chapter obj){return obj.id == temp.chapterId;});
}
foreach(HeroConfigData temp in ConfigManager.GetList<HeroConfigData>())
{
temp.normalAttackList= ConfigManager.GetList<NormalAttackData>().FindAll(delegate(NormalAttackData obj){ return obj.roleid == temp.roleId;});
}
foreach(MonsterConfigData temp in ConfigManager.GetList<MonsterConfigData>())
{
temp.normalAttackList= ConfigManager.GetList<NormalAttackData>().FindAll(delegate(NormalAttackData obj){ return obj.roleid == temp.roleId;});
}
foreach(SkillData temp in ConfigManager.GetList<SkillData>())
{
temp.conditionList= ConfigManager.GetList<SkillCondition>().FindAll(delegate(SkillCondition obj){ return obj.skillId == temp.skillId;});
temp.affectList= ConfigManager.GetList<SkillAffect>().FindAll(delegate(SkillAffect obj){ return obj.skillId == temp.skillId;});
}
foreach(SkillEffect temp in ConfigManager.GetList<SkillEffect>())
{
string[] sList = temp.timeId.Split('&');
temp.timeList= ConfigManager.GetList<SkillTime>().FindAll(delegate(SkillTime obj){foreach (string mys in sList){ int id = int.Parse(mys);return obj.timeid == id && temp.skillId == obj.skillId; } return false ;});
}
foreach(SkillBuff temp in ConfigManager.GetList<SkillBuff>())
{
string[] sList = temp.timeId.Split('&');
temp.timeList= ConfigManager.GetList<SkillTime>().FindAll(delegate(SkillTime obj){foreach (string mys in sList){ int id = int.Parse(mys);return obj.timeid == id && temp.skillId == obj.skillId; } return false ;});
}
foreach(SkillAffect temp in ConfigManager.GetList<SkillAffect>())
{
temp.effectList= ConfigManager.GetList<SkillEffect>().FindAll(delegate(SkillEffect obj){ return obj.affectId == temp.affectId && obj.skillId == temp.skillId;});
}

        }
    }


public abstract class ConfigMetaData
{
    internal abstract int CustomCode();
    internal abstract void Serialize(BinaryWriter bw);
    internal abstract void Deserialize(BinaryReader br);
    internal abstract ConfigMetaData Clone();
}


public sealed class ConfigManager
{
    private static Dictionary<int, IList> allDataList = new Dictionary<int, IList>();

    private static void Add(IList list, int hc)
    {
        if (!allDataList.ContainsKey(hc))
        {
            allDataList.Add(hc, list);
        }
    }


    /// <summary>
    /// 从byte数组加载
    /// </summary>
    /// <param name="dataList"></param>
    public static void Load(byte[] dataList)
    {
        BinaryReader br = new BinaryReader(new MemoryStream(dataList));
        br.ReadString();
        int count = br.ReadInt32();
        for (int i = 0; i < count; i++)
        {
            int hc = br.ReadInt32();
            ConfigMetaData cmd = LoadType.Get(hc);
            IList list = (IList)Activator.CreateInstance(typeof(List<>).MakeGenericType(cmd.GetType()));
            int listCount = br.ReadInt32();
            for (int j = 0; j < listCount; j++)
            {
                cmd = cmd.Clone();
                cmd.Deserialize(br);
                list.Add(cmd);
            }
            if (allDataList.ContainsKey(hc))
            {
                allDataList[hc] = list;
            }
            else
            {
                allDataList.Add(hc, list);
            }
        }
        br.Close();
        br = null;
        dataList = null;
        LoadType.Init();
        System.GC.Collect();
    }

    /// <summary>
    /// 转成byte数组
    /// </summary>
    /// <returns></returns>
    public static byte[] ToBinary()
    {
        MemoryStream ms = new MemoryStream();
        BinaryWriter bw = new BinaryWriter(ms);
        bw.Write("0");
        int count = 0;
        foreach (IList list in allDataList.Values)
        {
            if (list.Count > 0)
            {
                count++;
            }
        }
        bw.Write(count);
        foreach (IList list in allDataList.Values)
        {
            if (list.Count > 0)
            {
                bw.Write(((ConfigMetaData)list[0]).CustomCode());
                bw.Write(list.Count);
                foreach (ConfigMetaData cmd in list)
                {
                    cmd.Serialize(bw);
                }
            }
        }
        byte[] temp = ms.ToArray();
        ms.Close();
        bw.Close();
        ms = null;
        bw = null;
        return temp;
    }

    public static IList GetList(Type t)
    {
        int hc = LoadType.GetCode(t.Name);
        if (allDataList.ContainsKey(hc))
        {
            return allDataList[hc];
        }
        return null;
    }

    public static List<T> GetList<T>() where T : ConfigMetaData
    {

        int hc = LoadType.GetCode(typeof(T).Name);
        if (allDataList.ContainsKey(hc))
        {
            return allDataList[hc] as List<T>;
        }
        return null;
    }

    /// <summary>
    /// 获得集合
    /// </summary>
    /// <typeparam name="T">类型</typeparam>
    /// <param name="callBack">存在次类型集合则回调</param>
    public static void GetList<T>(System.Action<List<T>> callBack) where T : ConfigMetaData
    {
        int hc = LoadType.GetCode(typeof(T).Name);
        if (allDataList.ContainsKey(hc))
        {
            callBack(allDataList[hc] as List<T>);
        }
    }
}}
